package com.example.lx.wyredpacketandroid.utils.greendaoUtil;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lx.wyredpacketandroid.utils.greendaoform.UserToken;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_TOKEN".
*/
public class UserTokenDao extends AbstractDao<UserToken, Long> {

    public static final String TABLENAME = "USER_TOKEN";

    /**
     * Properties of entity UserToken.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Openid = new Property(1, String.class, "openid", false, "openid");
        public final static Property Access_token = new Property(2, String.class, "access_token", false, "access_token");
        public final static Property Refresh_token = new Property(3, String.class, "refresh_token", false, "refresh_token");
    }


    public UserTokenDao(DaoConfig config) {
        super(config);
    }
    
    public UserTokenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_TOKEN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"openid\" TEXT," + // 1: openid
                "\"access_token\" TEXT," + // 2: access_token
                "\"refresh_token\" TEXT);"); // 3: refresh_token
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_TOKEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserToken entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(2, openid);
        }
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(3, access_token);
        }
 
        String refresh_token = entity.getRefresh_token();
        if (refresh_token != null) {
            stmt.bindString(4, refresh_token);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserToken entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(2, openid);
        }
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(3, access_token);
        }
 
        String refresh_token = entity.getRefresh_token();
        if (refresh_token != null) {
            stmt.bindString(4, refresh_token);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserToken readEntity(Cursor cursor, int offset) {
        UserToken entity = new UserToken( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // openid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // access_token
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // refresh_token
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserToken entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOpenid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccess_token(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRefresh_token(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserToken entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserToken entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserToken entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
